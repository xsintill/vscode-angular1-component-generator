import "./{serviceFileName}.container.scss";

import angular from "angular";

import { {appname} } from "app/shared/constants/application.const";
import { {serviceNameConstantCased}_SERVICE_NAME, TEMPLATE_PATH_{componentNameConstantCased} } from "./{serviceFileName}.const";
//Next import is needed to prevent Unknown provider: <ServiceName>ServiceProvider <- <ServiceName>Service and still move the consts to it's own file
import "./{serviceFileName}.service";
import { {className}Service } from "./{serviceFileName}.service";
import "./{serviceFileName}.ui";
// import { {className}DTO } from "app/server-models/DTO/{className}DTO";

/**
 *  Container component llq-{serviceFileName}
 */
export class {containerClassName} {
    // public data: {className}DTO[];
    /**
     *  Field with value used for registering the component llq-{serviceFileName}
     */
    public static componentName = "llq{className}";

    /**
     *  Dependency injection annotations
     */
    public static $inject = [
        {serviceNameConstantCased}_SERVICE_NAME
    ];

    constructor(
        private readonly {camelCasedClassName}Service: {className}Service
    ) {
    }

    /**
     * code underneath only serves as an example to get this working you need to uncomment code underneath the data property and the
     * import - import { {className}DTO } from "app/server-models/DTO/{className}DTO";
     * if you do not need this at all you might want to clean up the container.html template since it has a binding using the $ctrl.data
     */
    // public search(searchText: string): void {
    //     this.{camelCasedClassName}Service.get(searchText).then((response: {className}DTO) => {
    //         this.data = response
    //     });
    // }

    /**
     * Life-cycle hook which is called by angular when initialization for the component starts
     * @returns: does not return anything
     */
    public $onInit(): void {
        /*put your code here*/
    }
}

angular.module({appname}).component({containerClassName}.componentName, {
    controller: {containerClassName},
    templateUrl: TEMPLATE_PATH_{componentNameConstantCased},
    bindings: {

    }
});