import { Observable, Subject } from "rxjs";

export interface IPresentable{className} {

}

/**
 *  Presenter for {className}
 */
export class {className}Presenter {

    private presentable{className}: Subject<IPresentable{className}> = new Subject();
    public presentable{className}$: Observable<IPresentable{className}> = this.presentable{className}.asObservable();

    constructor() {
        /*put your code here*/
    }

    public destroy(): void {
        /* clean up here*/
    }

    /**
     * This method is mainly here as an example 
     */
    public createPresentable{className}({camelCaseClassName}: IPresentable{className}): void {
        let presentable: IPresentable{className} = {...{camelCaseClassName}};
        // Transform the {camelCaseClassName} to make it become presentable

        this.presentable{className}.next(presentable);
    }
}