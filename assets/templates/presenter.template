import { Observable, Subject } from "rxjs";

import { IPresentable{className} } from "./{componentNameKebabCased}.type";

/**
 *  Presenter for {className}
 */
export class {className}Presenter {

    private readonly presentable: Subject<IPresentable{className}> = new Subject();
    public presentable$: Observable<IPresentable{className}> = this.presentable.asObservable();

    constructor() {
        /*put your code here*/
    }

    public destroy(): void {
        /* clean up here*/
    }

    /**
     * This method is mainly here as an example
     */
    public createPresentable(presentableState: IPresentable{className}): void {
        const presentable = this.determineDefaultOrPreviousState(presentableState);
        // Transform the {camelCaseClassName} to make it become presentable

        this.presentable.next(presentable);
    }

    private determineDefaultOrPreviousState(previousState: IPresentable{className}): IPresentable{className} {
        return (previousState === undefined) ?
            { ...this.getDefaultPresentableValues() } :
            { ...previousState };
    }
    private getDefaultPresentableValues(): IPresentable{className} {
        const presentableState: Partial<IPresentable{className}> = {
            // Put the IPresentable{className} properties here you need defaults for
        };
        return presentableState as Required<IPresentable{className}>;
    }
}