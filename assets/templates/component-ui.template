import "./{componentNameKebabCased}.ui.scss";

import angular from "angular";
import { Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";

import { LLQAPP_NAME } from "app/shared/constants/application.const";
import { {areasOrShared} } from "app/shared/constants/template-paths.const";
import { extractChangeValue } from "app/shared/on-change-object/on-change-object-helper";
import { IPresentable{className}, {className}Presenter } from "./{componentNameKebabCased}.presenter";

export const TEMPLATE_PATH_{componentNameConstantCased}_UI = 
    `{currentpath}/{componentNameKebabCased}.ui.html`;

/**
 *  View component llq-{componentNameKebabCased}-ui
 */
export class {className}Ui {
    public presentable: IPresentable{className};

    private presenter: {className}Presenter;
    private readonly unsubscribe = new Subject();

    /**
     *  Field with value used for registering the component llq-{componentNameKebabCased}-ui
     */
    public static componentName = "llq{className}Ui";

    public static $inject = [
    ];

    constructor() {
        this.presenter = new {className}Presenter();
        this.presenter.presentable$.pipe(
            takeUntil(this.unsubscribe)
        ).subscribe((presentable: IPresentable{className}) => {
            this.presentable = presentable;
        });
    }

    public $onInit(): void {
        /*put your code here*/
    }

    public $onDestroy(): void {
        this.unsubscribe.next();
        this.unsubscribe.complete();
        this.presenter.destroy();
        this.presenter = null;
    }

    /**
     * Life-cycle hook which is called by angular when a change occurs for any bindings assigned to the component
     * @returns: does not return anything
     */
    public $onChanges(onChangesObj: ng.IOnChangesObject): void {

        let {camelCaseClassName}: IPresentable{className};

        {camelCaseClassName} = extractChangeValue<string>(onChangesObj.{camelCaseClassName});

        this.presenter.createPresentable({camelCaseClassName});
    }
}

angular.module({appname}).component({className}Ui.componentName, {
    controller: {className}Ui,
    templateUrl: TEMPLATE_PATH_{componentNameConstantCased}_UI,
    bindings: {
        {camelCaseClassName}: "<"
    }
});